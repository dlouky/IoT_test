# -*- coding: utf-8 -*-
"""
Created on Sat Jul 18 07:41:23 2020

@author: Dlouky Federico Manuel

This script simulates the creation of credentials for devices and only the
system administrator has the permissions to 
execute create_credential(device_id) to create a credential for a given
device_id.
The new credential is generated and saved into "device_credentials" folder
as a json file. Finally, some of the content of the credential is registered 
in historical_credentials.csv (with the date when it was generated)
to have a control on the credentials generated.
Each json file has the following content:
    •	device_id: device identification. A random SHA1 hash from factory
    •	device_name: for this exercise, it will be an integer
    •	credential_creation_date: when the credential was created
    •	device_function: the tasks that the device must execute
    
"""

from datetime import datetime as dt
import pandas as pd
import json


device_function = """
import random
from datetime import datetime as dt

signal_counter = 0 # The quantity of payloads generated by this device
battery_lev = 1 # The initial level battery of this device

def battery():
    # Declare the global variables
    global battery_lev, signal_counter
    # Decrease battery level each 10 signals emitted
    if signal_counter%10 == 0:
        battery_lev = round(random.uniform(battery_lev-0.03, battery_lev), 2)
    return battery_lev

def device():        
    # Increment the count of payload generated by this device
    global signal_counter
    signal_counter +=1
    
    # Recover device name from the credential
    device_name = credential['device_name']
    
    # Let's suppose that the devices will be located in the center of Argentina.
    # Generate a random latitude and longitude within the limits of the 
    # selected area (area is obtained via https://boundingbox.klokantech.com/)
    device_latitude = float(round(random.uniform(-37.36, -32.04), 6))
    device_longitude = float(round(random.uniform(-68.22, -61.69), 6))
    
    # Let's simulate the battery level
    bat_lvl = battery()
    
    # Now create the payload timestamp
    signal_date = dt.now()

    # Finally return the payload
    return json.dumps({"device_id": device_id,
                        "device_name": device_name,
                        "device_latitude": device_latitude,
                        "device_longitude": device_longitude,
                        "device_battery_level": bat_lvl,
                        "signal_date":signal_date},
                        default = str)
"""

def create_credential(device_id):
    # The path where credentials will be saved. This folder includes the
    # historical credentials register (historical_credentials.csv).
    path = ".\device_credentials"
    
    # Load the historical credentials register.
    hist_creds = pd.read_csv(path + "\historical_credentials.csv",
                                   header=0, sep=",").sort_values('device_id')
    
    # If historical credentials has no credentials it means that it is the 
    # first time that a device is created, so create the first device.
    # Else, read the last credential and create a new one.
    if hist_creds.shape[0] == 0:
        # Create the new device id and name
        new = [device_id,1000001]
        hist_creds.loc[0] = [new[0], new[1], dt.now()]
        # Create the new credential content
        credential = hist_creds.iloc[[-1],:].to_dict('records')[0]
        credential["device_function"] = device_function
    else:
        # Get the last device id and name and create new id an name
        new = [device_id, hist_creds['device_name'].iloc[-1]+1]
        # Register in historical csv the new credential
        hist_creds.loc[len(hist_creds)] = [new[0], new[1], dt.now()]
        # Create the new credential content
        credential = hist_creds.iloc[[-1],:].to_dict('records')[0]
        credential["device_function"] = device_function
    
    # Update the historical_credentials.csv
    hist_creds.to_csv(path + '\historical_credentials.csv',index=False)
    
    # Save the credential as json file
    with open(path+"\device_"+str(new[0])+".json", "w") as file:
        json.dump(credential, file, default = str)
    
    return path+"\device_"+str(new[0])+".json"

# Only the system administrator has the permissions to execute the next lines
# from AB_device_simulator import device_id
# credential_path = create_credential(device_id)
    
